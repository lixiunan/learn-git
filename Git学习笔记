目录
一.Git简介
  1.Git是目前世界上最先进的分布式版本控制系统（没有之一）。
  2.集中式(CVS、SVN)VS分布式：
    1)集中式版本控制系统，版本库集中存放在中央服务器，(个人)必须要联网才能工作,没有历史版本库。
    2)分布式版本控制系统，没有“中央服务器”，每个开发人员电脑上都有一个完整的版本库。
    3)分布式优势：安全性更高，无需联网，若“中央服务器”故障，任何一个其他开发者本地都有最新的带历史记录的版本库。
    4)主要区别在于历史版本库的存放，集中式历史版本只存在于中央服务器，而分布式中每个本地库都有历史记录存放。
二.安装Git
三.Git命令
   1.创建版本库:
        1)选择一个合适目录
	Windows系统请确保目录名（包括父目录）不包含中文

	如$ cd d:
	$ mkdir <repository-name>，创建库名
	$ cd <repository-name>，进入库内
	补充 pwd显示路径，ls显示当前目录，ls -ah显示隐藏目录
	
	2)在当前目录初始化库(通过git init命令把这个目录变成Git可以管理的仓库：)
	$ git init
	
	3)添加文件到Git仓库，分两步：
	  a)使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	  b)使用命令git commit -m <message>，完成。
	  注意 :可以多次git add ，最后一次git commit
	
   2.git status                查看工作区当前状态
     git diff <file-name>      查看修改内容
     git log                   查看提交历史，以便确定要回退到哪个版本  （按q退出查看）
     git log --pretty=oneline  简化显示提交历史日志
     git reflog                查看命令历史，以便确定要回到未来的哪个版本
     * HEAD，当前版本
     * HEAD^，上个版本
     * HEAD^^，上上个版本
     * HEAD~100，往上100个版本
     git reset --hard HEAD^    回退到上一个版本
     git reset --hard 1094a    后退版本，1094a是版本ID，写前几位就可以
四.工作区与暂存区
   工作区就是电脑中能看到的目录，工作区有一个隐藏目录.git，这是Git的版本库
   需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
五.管理修改
   ***  Git管理的是修改，而不是文件；Git是跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中
   git diff HEAD -- <readme.txt文件名称>     命令可以查看工作区和版本库里面最新版本的区别；
   1.修改但未add 
     比较工作区与暂存区（即上次git add的内容）的不同
        a) git diff               比较所有修改文件的不同
	b) git diff <file-name>   比较指定修改文件的不同
   2.修改已add但未commit
      git diff --staged  /  git diff --cached    比较暂存区与仓库分支（上次git commit）的不同
六.撤销修改
   1.git checkout -- <readme.txt file-name>  把文件在工作区的修改全部撤销，这里有两种情况：
     一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
     一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
     总之，就是让这个文件回到最近一次git commit或git add时的状态。
   2.git reset HEAD <file>      可以把暂存区的修改撤销掉（unstage），重新放回工作区  
    git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
七.删除文件
   1.一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了   rm test.txt
   2.确定要删除，执行步骤： 
      a)git rm test.txt    
      b) git commit -m "remove test.txt"
   3.删错了
     git checkout -- <file-name>
     注意：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
     ⚠️：从来没有被添加到版本库就被删除的文件，是无法恢复的！
八.远程仓库
   1.创建SSH Key（在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key）
     ssh-keygen -t rsa -C "youremail@example.com"
     ***补充 在用户主目录下(cd)
	$ ls -ah可见.ssh目录
	$ cd .ssh可见id_rsa(私钥不能泄露)和id_rsa.pub(公钥可公开)
   2.登陆GitHub，1）打开“Account settings”，“SSH Keys”页面
      2）点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
      3）点“Add Key”，你就应该看到已经添加的Key
九.关联远程仓库
   1.*首先需要创建远程仓库 
      1）首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
      2）在Repository name填入“learngit”，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库
      3）目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
   2.*根据GitHub的提示，在本地的“learngit”仓库下运行命令：	
     git remote add origin git@github.com:username/repositoryname.git    （username你自己的GitHub账户名）
     或
     $ git remote add origin https://github.com/username/repositoryname.git
     远程库默认名字为origin

   3.*把本地库的所有内容推送到远程库上
     git push -u origin master(由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。)
   4.*只要本地作了提交，就可以通过命令
     git push origin master
十.从远程库克隆
   1.首先，登陆GitHub，创建一个新的仓库，名字叫'gitskills'
   2.勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
   3.用命令git clone克隆一个本地库   git clone git@github.com:username/repositoryname.git
   4.进入目录查看
     cd gitskills
     ls
     
  小结：Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。   
  
十一.分支管理
  <一> 创建与合并分支
       1.git branch <branch-name>        创建分支
       2.git checkout <branch-name>      切换分支
       3.git checkout -b <branch-name>   创建+切换分支
       4.git branch                      查看分支  （git branch命令会列出所有分支，当前分支前面会标一个*号。）
       5.git merge <branch-name>         合并某分支到当前分支
       6.git merge --no-ff -m "description" <branch-name>   普通模式合并分支 （通常进行分支合并时，如果可以，Git会使用Fast forward模式，删除分支后，分支历史信息会丢失  --no-ff表示禁用Fast forward模式，能看出曾做过合并）
       7.git branch -d <branch-name>     删除分支
       8.git branch -D <branch-name>     强行删除分支
       9.git log --graph                 查看分支合并图
       10.git log --graph --pretty=oneline --abbrev-commit   简洁查看
       11.git status          查看冲突文件
       
  <二> 解决冲突    
  <三> 分支管理策略
  <四> Bug分支
      1.git stash          保存工作现场（把当前工作现场“储藏”起来，等以后恢复现场后继续工作）
      2.git stash list     查看保存的工作现场
      3.git stash apply    恢复工作现场
      4.git stash drop     删除工作现场
      5.git stash pop      恢复并删除工作现场
      
  <五> Feature分支    
  <六> 多人协作
       1.git remote     查看远程库信息
       2.git remote -v  详细查看远程库信息
       3.git push origin <branch-name>    本地推送分支
       4.git checkout -b <branch-name> origin/<branch-name>    在本地创建和远程分支对应的分支
       5.git branch --set-upstream <branch-name> origin/<branch-name>  或  $ git branch --set-upstream-to=origin/<branch-name> <branch-name>  建立本地分支和远程分支的关联
       6.git pull   从远程抓取分支
       
       多人协作的工作模式：
       1.首先，可以试图用git push origin <branch-name>推送自己的修改；
       2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
       3.如果合并有冲突，则解决冲突，并在本地提交；
       4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
       如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

 <七> Rebase“变基”
      git rebase
      rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。
      只对尚未推送或尚未分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作
十二.标签管理
    发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本
    将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照
    
    1.创建标签
    git tag <tag-name>
    
    git tag        查看所有标签
    git tag <tag-name>      在最新commit上打一个标签
    git tag <tag-name> commit-id    在对应的commit_id上打一个新标签
    git show <tagname>      查看对应标签的信息
    git tag -a <tag-name> -m "description" commit-id创建带有说明的标签 （-a指定标签名，-m指定说明文字）
    
    注意标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。
    
    2.操作标签
    git tag -d <tag-name>       删除一个本地标签（因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。）
    
    删除一个远程标签
    git tag -d <tag-name>    先从本地删除
    git push origin :refs/tags/<tag-name>    再从远程删除
    
    git push origin <tagname>   推送某个标签到远程
    git push origin --tags      一次性推送全部尚未推送到远程的本地标签
    
十三.使用GitHub
     如何参与一个开源项目

     Fork任意开源库 ——> 从自己的账户下clone ——> 修复bug或者新增一个功能 ——> 若希望官方库接受你的修改，可以在GitHub上发起一个pull request

十四.本地库既关联GitHub，又关联码云   
    如原来已经关联了默认名origin的GitHub:
    1.git remote rm origin  先删除已关联的名为origin的远程库
    2.git remote add github git@github.com:username/repositoryname.git    然后，先关联GitHub的远程库(注意，远程库的名称叫github，不叫origin了)
    3.git remote add gitee git@gitee.com:username/repositoryname.git    接着，再关联码云的远程库 (同样注意，远程库的名称叫gitee，不叫origin了)
    注意 多个关联后以上所以命令含的origin都换成相应的github或gitee
    
    如果要推送到GitHub，使用命令：git push github master   
    如果要推送到码云，使用命令：git push gitee master
    
十五.自定义Git
    《1》显示颜色
     git config --global color.ui true   让Git显示颜色，会让命令输出看起来更醒目
    《2》忽略特殊文件
      在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
      
      忽略文件的原则是：
	1.忽略操作系统自动生成的文件，比如缩略图等；
	2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	
      有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：
      1、如果你确实想添加该文件，可以用-f强制添加到Git：
       git add -f App.class
      2、或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
        git check-ignore -v App.class
	
    《3》配置别名
       如
       用git st就表示git status
       git config --global alias.st status
       
       配置一个git last，让其显示最后一次提交信息：
       git config --global alias.last 'log -1'
       
       甚至还有人丧心病狂地把lg配置成了：
       git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
       
       
	
	
	
    


    
  
